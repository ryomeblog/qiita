openapi: 3.0.0
info:
  title: TmpSpringBoot
  version: '1.0'
  description: |-
    TmpSpringBootプロジェクト
      REST APIを主流としたSpring Bootの基本プロジェクトです。

    # API共通仕様
    ## 排他制御
    * 排他制御方式は、楽観排他とする。
    * 排他制御はDB更新時に毎回行う。
    * 楽観排他制御は以下のように行う。
      1. 取得系API実行時  
         DBに格納されているバージョン情報を返却する。
      2. 更新API実行時  
         取得系API実行時に返却したバージョン情報をリクエストパラメータに含める。  
         DB更新条件にリクエストパラメータで渡されたバージョン情報を含め、  
         バージョン情報が一致する場合のみ更新が行われるようにする。  
         更新時、バージョンを1インクリメントする。  
         キーが見つからなかったことによるエラーとバージョン不一致によるエラーを区別する。
    ## 入力パラメータ／バリデーションチェック
      * リクエストはStringで受け取り、必要に応じて型変換を行う。
      * 値がnullの場合は必須項目チェック以外のバリデーションチェックを行わない。
      * バリデーション結果がNGだった場合、HTTPステータスコード400、結果コード101を返却する。
        * 詳細な情報についてはレスポンスボディの'optional.badParameterList'に格納する。
          
          | パラメータ | 説明                                               |
          | ---------- | -------------------------------------------------- |
          | name       | パラメータ名                                       |
          | value      | 入力値                                             |
          | message    | エラーメッセージ(Springが生成したメッセージを格納) |

    ## 更新系APIのDB更新条件
      1. リクエストパラメータなし または 値がnullの場合  
         * DB更新なし
      2. その他の値の場合  
         * リクエストパラメータでDBを更新する。
    ## 結果コード一覧

    | 結果コード | 説明                                           |
    | ---------- | ---------------------------------------------- |
    | 000        | 正常                                           |
    | 101        | リクエストパラメータ不正                       |
    | 102        | ユーザIDまたはパスワードが不正                 |
    | 103        | 認証情報不正(ユーザ権限がない)                 |
    | 104        | ID作成に失敗                                   |
    | 105        | 取得、更新、削除対象のデータが存在しない       |
    | 106        | 既に同一キーが存在するデータを作成しようとした |
    | 107        | 排他制御が行われた                             |
    | 108        | 外部との通信に失敗した                         |
    | 109        | 不正なDB処理を検知した                         |
servers:
  - url: 'http://localhost:8080'
    description: APサーバ
  - url: 'http://localhost:8003'
    description: MOCKサーバ
tags:
  - name: 認証機能（login）
    description: 認証機能を担うAPI
  - name: ユーザ管理機能（account）
    description: ユーザ管理機能を担うAPI
paths:
  /user/login:
    post:
      summary: API001 - ログイン機能
      description: |
        ## 概要
        SpringSecurityの認証機能を利用してログイン処理を行う。

        ## 処理詳細
        1. リクエストパラメータチェックを行う。

           | No | パラメータ | 説明       | 型     | 文字種     | 必須 | デフォルト値 | 最小文字数 | 最大文字数 | パターン |
           |----|------------|------------|--------|------------|------|--------------|------------|------------|----------|
           | 1  | userId     | ユーザID    | String | 半角英数字 | ○    | -            | 12          | 12         | -        |
           | 2  | password   | パスワード | String | 半角英数字   | ○    | -            | 1          | 20         | -        |

        2. 「user_mst」テーブルからリクエストパラメータのユーザIDを検索条件に該当レコードを取得する。
           * 「user_mst」テーブルに該当レコードがなかった場合は404エラーとする。
           * 該当レコードのアカウントロックがTrueの場合は403エラーとする。

        3. リクエストパラメータのパスワードと2で取得したレコードのパスワードが一致するか確認する。
           * リクエストパラメータのパスワードをハッシュ化して比較する。
           * 一致の場合、以下の通りリクエストパラメータのユーザIDと「user_mst」テーブルのユーザIDが一致するレコードを更新する。

           | 論理名               | 物理名          | 導出元                               |
           | -------------------- | --------------- | ------------------------------------ |
           | ユーザID             | user_id         | 更新しない                           |
           | アカウントロック     | lock            | 0                                    |
           | 更新日時             | update_datetime | 現在日時                             |
           | バージョン           | version         | リクエストパラメータのバージョン + 1 |

           * 不一致の場合、以下の処理をする。
              - 2で取得したログイン失敗回数をカウントアップする。
              - 2で取得したログイン失敗回数が上限を超えた場合、2で取得したログイン失敗回数を0にして、2で取得したアカウントロックをTrueにする。
              - 以下の通りリクエストパラメータのユーザIDと「user_mst」テーブルのユーザIDが一致するレコードを更新する。

           | 論理名               | 物理名          | 導出元                               |
           | -------------------- | --------------- | ------------------------------------ |
           | ユーザID             | user_id         | 更新しない                           |
           | パスワード間違え回数 | error_password  | 2で取得したログイン失敗回数          |
           | アカウントロック     | lock            | 2で取得したアカウントロック          |
           | 更新日時             | update_datetime | 現在日時                             |
           | バージョン           | version         | リクエストパラメータのバージョン + 1 |

        4. SpringSecurityの認証処理を行う。
        5. 2で取得した「user_mst」テーブルのレコードを返却する。
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                userId:
                  type: string
                  minLength: 12
                  maxLength: 12
                password:
                  type: string
                  minLength: 1
                  maxLength: 20
              required:
                - userId
                - password
            examples:
              example:
                value:
                  userId: user00000001
                  password: string
        description: ''
      responses:
        '200':
          description: 正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: 結果コード
                    enum:
                      - '000'
                  optional:
                    $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    resultCode: '000'
                    optional:
                      userId: user0000001
                      userName: example
                      author: ユーザ
                      version: 0
          headers:
            JSESSIONID:
              schema:
                type: string
              description: セッションID
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403_login'
      operationId: postLogin
      parameters:
        - schema:
            type: string
          in: header
          name: Content-Type
          description: application/json
      x-internal: false
      tags:
        - 認証機能（login）
    parameters: []
  /user/logout:
    post:
      summary: API002 - ログアウト機能
      description: |-
        ## 概要
        SpringSecurityの認証機能を利用してログアウト処理を行う。

        ## 処理詳細
        1. SpringSecurityのログアウト処理を行う。
        2. レスポンスを返却する。
      responses:
        '200':
          $ref: '#/components/responses/200'
      operationId: postLogout
      security:
        - Cookie: []
      tags:
        - 認証機能（login）
    parameters: []
  /user/search:
    get:
      summary: API003 - ユーザ検索機能
      description: |
        ## 概要
        「user_mst」テーブルから検索を行う。
        ## 処理詳細
        1. リクエストパラメータチェックを行う。
          
           | No | パラメータ | 説明             | 型      | 文字種     | 必須 | デフォルト値 | 最小文字数(最小値) | 最大文字数(最大値) | パターン(正規表現) |
           |----| ---------- | ---------------- | ------- | ---------- | ---- | ------------ | ------------------ | ------------------ | ------------------ |
           | 1  | userId     | ユーザID         | String  | 半角英数字 |      |              | 12                 | 12                 |                    |
           | 2  | userName   | ユーザ名         | String  | 半角英数字 | -    |              | 1                  | 100                |                    |
           | 3  | lock       | アカウントロック | Boolean | 半角数字   |      |              | 0                  | 1                  |                    |
           | 4  | authority  | 権限             | Byte    | 半角数字   |      | 0            |                    |                    | [01]               |
           | 5  | orderBy    | ソート項目       | Integer | 半角数字   | -    | 1            | -                  | -                  | [1234] ※1           |
           | 6  | ascOrDesc  | 昇順／降順       | Integer | 半角数字   | -    | 1            | -                  | -                  | [12]               |
           | 7  | limit      | 最大取得数       | Integer | 半角数字   | -    | 100          | (1)                | (2147483647)       | -                  |
           | 8  | offset     | オフセット       | Integer | 半角数字   | -    | 0            | (0)                | (2147483647)       | -                  |

           ※1 ソート項目は、1：ユーザID, 2：ユーザ名, 3：アカウントロック, 4：権限。
        2. 管理者ユーザか確認する。
           * 管理者ユーザ以外の場合、403エラーとする。
        3. 「user_mst」テーブルからリクエストパラメータのユーザID, アカウントロック, 権限を検索条件に該当レコードを取得する。
           * リクエストパラメータがnullの項目は検索条件に適用しない。
        4. 取得した「user_mst」テーブルの該当レコードを返却する。
      parameters:
        - name: userId
          in: query
          description: ユーザID
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: lock
          in: query
          description: アカウントロック
          required: false
          schema:
            type: boolean
            minLength: 1
            maxLength: 20
        - name: authority
          in: query
          description: 権限
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
            default: 0
        - name: orderBy
          in: query
          description: ソート項目
          schema:
            type: integer
            enum:
              - 1
              - 2
              - 3
            default: 1
        - name: ascOrDesc
          in: query
          description: '1: 昇順, 2: 降順'
          schema:
            type: integer
            enum:
              - 1
              - 2
            default: 1
        - name: limit
          in: query
          description: 最大取得数
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 2147483647
        - name: offset
          in: query
          description: オフセット
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 2147483647
      responses:
        '200':
          description: 正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    description: 結果コード
                    type: string
                    enum:
                      - '000'
                  optional:
                    $ref: '#/components/schemas/UserList'
        '400':
          $ref: '#/components/responses/400'
      operationId: getAccountSearch
      security:
        - Cookie: []
      tags:
        - ユーザ管理機能（account）
    parameters: []
  /account:
    get:
      summary: API004 - ユーザ詳細検索機能
      description: |
        ## 概要
        「user_mst」テーブルから詳細情報を取得し、返却する。
        ## 処理詳細 
        1. ログイン時のユーザIDをキーに「user_mst」テーブルからレコードを取得する。
           * 「user_mst」テーブルに該当レコードがなかった場合は404エラーとする。
        2. 取得した「user_mst」テーブルのレコードを返却する。
      responses:
        '200':
          description: 正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: '結果コード (000: 正常)'
                    enum:
                      - '000'
                  optional:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      operationId: getAccount
      security:
        - Cookie: []
      parameters: []
      tags:
        - ユーザ管理機能（account）
    put:
      tags:
        - ユーザ管理機能（account）
      summary: API005 - ユーザ編集機能
      description: |
        ## 概要
        「user_mst」テーブルの更新を行う。
        ## 処理詳細
        1. リクエストパラメータチェックを行う。

           | No  | パラメータ | 説明       | 型     | 文字種     | 必須 | デフォルト値 | 最小文字数(最小値) | 最大文字数(最大値) | パターン(正規表現) |
           | --- | ---------- | ---------- | ------ | ---------- | ---- | ------------ | ------------------ | ------------------ | ------------------ |
           | 1   | password     | パスワード   | String | 半角英数字 | -    |           | 1                 | 20                 |               |
           | 2   | userName     | ユーザ名   | String | 半角英数字 | -    |           | 1                 | 100                 |               |
           | 3   | version     | バージョン   | Short | 半角数字 | ○    | 0          |                  |                  |               |

        2. ログイン時のユーザIDをキーにDBにレコードが存在するか確認する。
           * レコードが存在しない場合、404エラーとする。
        3. リクエストパラメータの「version」と「user_mst」テーブルの「version」が一致するか確認する。
           * 不一致の場合、409エラーとする。
        4. 以下の通りログイン時のユーザIDと「user_mst」テーブルのユーザIDが一致するレコードを更新する。

           | 論理名               | 物理名          | 導出元                                     |
           | -------------------- | --------------- | ------------------------------------------ |
           | ユーザID           | user_id        | 更新しない           |
           | パスワード           | password        | リクエストパラメータのパスワード               |
           | ユーザ名           | user_name        | リクエストパラメータのユーザ名               |
           | 更新日時           | update_datetime        | 現在日時            |
           | バージョン           | version        | リクエストパラメータのバージョン + 1          |

        5. レスポンスを返却する。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  minLength: 1
                  maxLength: 20
                  description: ユーザ名
                password:
                  type: string
                  description: パスワード
                  minLength: 1
                  maxLength: 20
                version:
                  type: integer
                  description: バージョン
                  maximum: 32767
                  minimum: 0
              required:
                - version
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      operationId: putAccount
      security:
        - Cookie: []
    delete:
      tags:
        - ユーザ管理機能（account）
      summary: API006 - ユーザ削除機能
      description: |
        ## 概要
        ログイン時のユーザIDと「user_mst」テーブルのユーザIDが一致するレコードを削除する。  
        ## 処理詳細
        1. リクエストパラメータチェックを行う。

           | No | パラメータ | 説明       | 型     | 文字種       | 必須 | デフォルト値 | 最小文字数(最小値) | 最大文字数(最大値) | パターン(正規表現) |
           |----|------------|------------|--------|--------------|------|--------------|--------------------|--------------------|--------------------|
           | 1   | userId      | ユーザID | String |  半角英数字  | ○    |         | 12                 | 12                  |                 |
        2. ログイン時のユーザIDと「user_mst」テーブルのユーザIDが一致するレコードを削除する。
           * 削除対象のレコードが存在しない場合は404エラーとする。
        3. レスポンスを返却する。
      responses:
        '200':
          $ref: '#/components/responses/200'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: deleteAccount
      security:
        - Cookie: []
  /account/lock:
    put:
      tags:
        - ユーザ管理機能（account）
      summary: API007 - ユーザロック機能
      description: |
        ## 概要
        「user_mst」テーブルの更新を行う。
        ## 処理詳細
        1. リクエストパラメータチェックを行う。

           | No  | パラメータ | 説明       | 型     | 文字種     | 必須 | デフォルト値 | 最小文字数(最小値) | 最大文字数(最大値) | パターン(正規表現) |
           | --- | ---------- | ---------- | ------ | ---------- | ---- | ------------ | ------------------ | ------------------ | ------------------ |
           | 1   | userId     | ユーザID   | String | 半角英数字 | -    |           | 12                 | 12                 |               |
           | 2   | lock     | アカウントロック   | Boolean | 半角数字 | -    |           | 0                 | 1                 |               |
           | 3   | version     | バージョン   | Short | 半角数字 | ○    | 0          |                  |                  |               |

        2. 管理者ユーザか確認する。
           * 管理者ユーザ以外の場合、403エラーとする。
        3. リクエストパラメータのをキーにDBにレコードが存在するか確認する。
           * 情報が存在しない場合、404エラーとする。
        4. リクエストパラメータの「version」と「user_mst」テーブルの「version」が一致するか確認する。
           * 不一致の場合、409エラーとする。
        5. 以下の通りリクエストパラメータのと「user_mst」テーブルのが一致するレコードを更新する。

           | 論理名               | 物理名          | 導出元                                     |
           | -------------------- | --------------- | ------------------------------------------ |
           | ユーザID           | user_id        | 更新しない               |
           | アカウントロック           | lock        | リクエストパラメータのアカウントロック               |
           | バージョン           | version        | リクエストパラメータのバージョン + 1          |
        5. レスポンスを返却する。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  minLength: 12
                  maxLength: 12
                  description: ユーザID
                lock:
                  type: boolean
                  description: 権限
                version:
                  type: integer
                  description: バージョン
                  maximum: 32767
                  minimum: 0
              required:
                - version
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      operationId: putAccountLock
      security:
        - Cookie: []
    parameters: []
  /signup:
    post:
      tags:
        - ユーザ管理機能（account）
      summary: API008 - ユーザ登録機能
      description: |
        ## 概要
        「user_mst」テーブルに登録を行う。
        ## 処理詳細
        1. リクエストパラメータチェックを行う。
          
           | No  | パラメータ   | 説明         | 型     | 文字種     | 必須 | デフォルト値 | 最小文字数(最小値) | 最大文字数(最大値) | パターン(正規表現) |
           | --- | ------------ | ------------ | ------ | ---------- | ---- | ------------ | ------------------ | ------------------ | ------------------ |
           | 1   | password     | パスワード   | String | 半角英数字 | 〇   |              | 1                  | 20                 |                    |
           | 2   | userName     | ユーザ名     | String | 半角／全角 | 〇   |              | 1                  | 100                |                    |
           | 3   | secretId     | 秘密の質問ID | String | 半角英数字 | 〇   |              | 7                  | 7                  |                    |
           | 4   | secretAnswer | 秘密の答え   | String | 半角英数字 | 〇   |              | 1                  | 200                |                    |

        2. 以下の通り「user_mst」テーブルに追加する。

           | 論理名               | 物理名          | 導出元                                                  |
           | -------------------- | --------------- | ------------------------------------------------------- |
           | ユーザID             | user_id         | ※1                                                     |
           | パスワード           | password        | リクエストパラメータのパスワードをハッシュ化した値      |
           | ユーザ名             | user_name       | リクエストパラメータのユーザ名                          |
           | 秘密の質問ID         | secret_id       | リクエストパラメータの秘密の質問ID                      |
           | 秘密の答え           | secret_answer   | リクエストパラメータの秘密の答え                        |
           | パスワード間違え回数 | error_password  | 0                                                       |
           | アカウントロック     | lock            | False                                                   |
           | 権限                 | authority       | 0                                                       |
           | 更新日時             | update_datetime | 設定しない ※デフォルト値のCURRENT_TIMESTAMPが設定される |
           | バージョン           | version         | 設定しない ※デフォルト値の0が設定される                 |

           ※1 通番でユーザIDを発行し、登録を行う。通番は「ID体系:user00000001~user99999999」とし、  
               「user_mst」テーブルから最大のユーザIDを取得し、インクリメントした値を格納する。
        3. 登録したレコードのユーザIDを返却する。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  minLength: 1
                  maxLength: 20
                  description: ユーザ名
                password:
                  type: string
                  minLength: 1
                  maxLength: 20
                  description: パスワード
                secretQuestionId:
                  type: string
                  minLength: 7
                  maxLength: 7
                  description: 秘密の質問
                secretAnswer:
                  type: string
                  minLength: 1
                  maxLength: 20
                  description: 秘密の答え
              required:
                - userName
                - password
                - secretQuestionId
                - secretAnswer
        description: ''
      responses:
        '200':
          description: 正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    description: '結果コード (000: 正常)'
                    type: string
                    enum:
                      - '000'
                  optional:
                    type: object
                    properties:
                      userId:
                        description: ユーザID
                        type: string
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
      operationId: postSignup
    parameters: []
  /question:
    get:
      summary: API009 - 秘密の質問検索機能
      operationId: getQuestion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode1:
                    type: string
                  optional:
                    type: object
                    properties:
                      questionList:
                        type: array
                        items:
                          type: object
                          properties:
                            commonId:
                              type: string
                            commonGroup:
                              type: string
                            commonName:
                              type: string
                            commonValue1:
                              type: string
                            commonValue2:
                              type: string
      description: |
        ## 概要
        「common_mst」テーブルから秘密の質問を取得する。
        ## 処理詳細

        1. 「common_mst」テーブルから「secret_question」を汎用マスタグループの検索条件に該当レコードを取得する。
        2. 取得した 「common_mst」テーブルのレコードを返却する。
      tags:
        - ユーザ管理機能（account）
    put:
      summary: API010 - パスワード再設定機能
      operationId: putQuestion
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
      description: |
        ## 概要
        秘密の質問と答えの一致を確認し、パスワードを変更する。
        ## 処理詳細
        1. リクエストパラメータチェックを行う。  

           | No | パラメータ     | 説明           | 型      | 文字種     | 必須 | デフォルト値 | 最小文字数(最小値) | 最大文字数(最大値) | パターン(正規表現) |
           |----|----------------|---------------|---------|------------|------|--------------|--------------------|--------------------|--------------------|
           | 1  | userId         | ユーザID      | String  | 半角英数字  | 〇    | -            | 12                 | 12                 | -                  |
           | 2  | newPassword       | 新パスワード | String  | 半角英数字    | 〇    | -            | 1                  | 20                  | -               |
           | 3  | secretQuestionId| 秘密の質問    | String  | 半角英数字   | 〇    | -            | 7                  | 7                  | -                  |
           | 4  | secretAnswer   | 秘密の答え     | String | 半角 / 全角   | 〇    | -            | 1                  | 200                 | -                  |

        2. ユーザIDをキーに「user_mst」テーブルからユーザ情報を取得する。
           * ユーザ情報が存在しない場合、404エラーとする。
        3. リクエストパラメータの秘密の質問、答えがユーザ情報の秘密の質問、答えと一致するか確認する。
           * 不一致の場合、404エラーとする。
        4. パスワードをリクエストパラメータの新パスワードに変更する。
           * 変更する際、新パスワードをハッシュ化する。
        5. レスポンスを返却する。
      tags:
        - ユーザ管理機能（account）
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  minLength: 12
                  maxLength: 12
                newPassword:
                  type: string
                  minLength: 1
                  maxLength: 20
                secretQuestionId:
                  type: string
                  minLength: 7
                  maxLength: 7
                secretAnswer:
                  type: string
                  minLength: 1
                  maxLength: 20
              required:
                - userId
                - newPassword
                - secretQuestionId
                - secretAnswer
components:
  securitySchemes:
    Cookie:
      name: JSESSIONID
      type: apiKey
      in: cookie
      description: ''
  responses:
    '200':
      description: 正常
      content:
        application/json:
          schema:
            type: object
            properties:
              resultCode:
                type: string
                description: '結果コード (000: 正常)'
                enum:
                  - '000'
    '400':
      description: Bad Request - リクエストパラメータに問題があります
      content:
        application/json:
          schema:
            type: object
            properties:
              resultCode:
                type: string
                description: '結果コード (1001: リクエストパラメータエラー)'
                enum:
                  - '101'
              optional:
                type: object
                properties:
                  errorParameterList:
                    description: 不正パラメータリスト
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          description: パラメータ名
                          type: string
                        value:
                          description: 値
                          type: string
                        message:
                          description: メッセージ
                          type: string
    '403':
      description: Forbidden - アクセス権がありません
      content:
        application/json:
          schema:
            type: object
            properties:
              resultCode:
                type: string
                description: '結果コード (1003: 認証情報なし, 1004: 権限エラー)'
                enum:
                  - '103'
                  - '104'
    '404':
      description: Not Found - データが存在しません
      content:
        application/json:
          schema:
            type: object
            properties:
              resultCode:
                type: string
                description: '結果コード (1005: 正常)'
                enum:
                  - '105'
    '405':
      description: Method Not Allowed - パスが違います
      content:
        application/json:
          schema:
            type: object
            properties:
              resultCode:
                type: string
    '409':
      description: Conflict - 排他制御が行われました
      content:
        application/json:
          schema:
            type: object
            properties:
              resultCode:
                type: string
                description: '結果コード (1007: 正常)'
                enum:
                  - '107'
    '500':
      description: Internal Server Error - 予期せぬエラーが発生しました
    403_login:
      description: Forbidden - 認証情報が不正です
      content:
        application/json:
          schema:
            type: object
            properties:
              resultCode:
                type: string
                description: '結果コード (1002: ログイン情報不正)'
                enum:
                  - '102'
  schemas:
    UserList:
      type: object
      properties:
        total:
          type: integer
        userList:
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        userId:
          type: string
        userName:
          type: string
        authority:
          type: string
        version:
          type: integer
  parameters: {}
  requestBodies: {}
